{"version":3,"sources":["Components/Container/Container.js","Components/Statistics/Statistics.js","Components/Feedback/FeedbackOptions.js","Components/Section/Section.js","Components/Notification/Notification.js","App.js","index.js","Components/Container/Container.module.css","Components/Feedback/FeedbackOptions.module.css"],"names":["Container","children","className","с","container","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","handleClick","map","option","style","btn","type","onClick","Section","title","Notification","App","state","event","setState","console","log","countTotalFeedback","Object","values","reduce","a","b","countPositiveFeedbackPercentage","Math","round","this","obj","keys","feedback","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"4RAGe,SAASA,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,ICDvC,IAkBeI,EAlBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,W,gBCcSC,EArBS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAClC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEb,UAAWc,IAAMC,IACjBC,KAAK,SACLC,QAAS,kBAAMN,EAAYE,IAJ7B,SAMGA,GALIA,SCPA,SAASK,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOpB,EAAY,EAAZA,SACvC,OACE,oCACGoB,GAAS,6BAAKA,IACdpB,KCJQ,SAASqB,EAAT,GAAkC,IAAVD,EAAS,EAATA,MACrC,OAAO,kCAAUA,GAAS,6BAAKA,M,ICM3BE,E,4MACJC,MAAQ,CACNlB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,YAAc,SAACY,GACb,EAAKC,UAAS,SAACF,GAAD,sBACXC,EAAQD,EAAMC,GAAS,MAE1BE,QAAQC,IAAI,uG,EAGdC,mBAAqB,WAEnB,OADYC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,I,EAIhEC,gCAAkC,WAIhC,OAHmBC,KAAKC,MACrB,EAAKb,MAAMlB,KAAO,EAAKuB,qBAAwB,M,4CAIpD,WACE,MAA+BS,KAAKd,MAA5BlB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjB+B,EAAMT,OAAOU,KAAKF,KAAKd,OACvBiB,EAAWH,KAAKzB,YAChBJ,EAAQ6B,KAAKT,qBACbnB,EAAqB4B,KAAKH,kCAEhC,OACE,eAACnC,EAAD,WACE,cAACoB,EAAD,CAASC,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBT,QAAS2B,EAAK1B,YAAa4B,MAE9C,oBAAIpB,MAAM,aAAV,eACA,cAACD,EAAD,CAASC,MAAM,aAAf,SACGZ,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAACY,EAAD,CAAcD,MAAM,+B,GAhDdqB,aAwDHnB,IC1DfoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,UAAY,+B,kBCA9BD,EAAOC,QAAU,CAAC,IAAM,gC","file":"static/js/main.efdb502b.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport с from \"./Container.module.css\";\r\n\r\nexport default function Container({ children }) {\r\n  return <div className={с.container}>{children}</div>;\r\n}\r\nContainer.propTypes = {\r\n  children: PropTypes.array.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n};\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\nexport default Statistics;\r\n","import style from './FeedbackOptions.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, handleClick }) => {\r\n  return (\r\n    <>\r\n      {options.map(option => (\r\n        <button\r\n          key={option}\r\n          className={style.btn}\r\n          type=\"button\"\r\n          onClick={() => handleClick(option)}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nFeedbackOptions.propTypes = {\r\n  handleClick: PropTypes.func,\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nexport default function Notification({ title }) {\r\n  return <section>{title && <h3>{title}</h3>}</section>;\r\n}\r\nNotification.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","import { Component } from \"react\";\r\n\r\nimport Container from \"./Components/Container/Container\";\r\nimport Statistics from \"./Components/Statistics/Statistics\";\r\nimport FeedbackOptions from \"./Components/Feedback/FeedbackOptions\";\r\nimport Section from \"./Components/Section/Section\";\r\nimport Notification from \"./Components/Notification/Notification\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleClick = (event) => {\r\n    this.setState((state) => ({\r\n      [event]: state[event] + 1,\r\n    }));\r\n    console.log(\"Кликнули на кнопку\");\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const sum = Object.values(this.state).reduce((a, b) => a + b, 0);\r\n    return sum;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const percentage = Math.round(\r\n      (this.state.good / this.countTotalFeedback()) * 100\r\n    );\r\n    return percentage;\r\n  };\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const obj = Object.keys(this.state);\r\n    const feedback = this.handleClick;\r\n    const total = this.countTotalFeedback();\r\n    const positivePercentage = this.countPositiveFeedbackPercentage();\r\n\r\n    return (\r\n      <Container>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions options={obj} handleClick={feedback} />\r\n        </Section>\r\n        <h2 title=\"Statistics\"> </h2>\r\n        <Section title=\"Statistics\">\r\n          {total > 0 ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={total}\r\n              positivePercentage={positivePercentage}\r\n            />\r\n          ) : (\r\n            <Notification title=\"No feedback given\"></Notification>\r\n          )}\r\n        </Section>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1O7r0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__11hle\"};"],"sourceRoot":""}