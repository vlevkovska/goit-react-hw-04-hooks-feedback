{"version":3,"sources":["Components/Container/Container.js","Components/Statistics/Statistics.js","Components/Feedback/FeedbackOptions.js","Components/Section/Section.js","Components/Notification/Notification.js","App.js","index.js","Components/Container/Container.module.css","Components/Feedback/FeedbackOptions.module.css"],"names":["Container","children","className","с","container","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","handleClick","map","option","style","btn","type","onClick","Section","title","Notification","App","useState","setGood","setNeutral","setBad","sum","index","state","Math","round","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+PAGe,SAASA,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,ICDvC,IAkBeI,EAlBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,W,gBCcSC,EArBS,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAClC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEb,UAAWc,IAAMC,IACjBC,KAAK,SACLC,QAAS,kBAAMN,EAAYE,IAJ7B,SAMGA,GALIA,SCPA,SAASK,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOpB,EAAY,EAAZA,SACvC,OACE,oCACGoB,GAAS,6BAAKA,IACdpB,KCJQ,SAASqB,EAAT,GAAkC,IAAVD,EAAS,EAATA,MACrC,OAAO,kCAAUA,GAAS,6BAAKA,MC0GlBE,MApGf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOjB,EAAP,KAAgBmB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOhB,EAAP,KAAYmB,EAAZ,KAkBMC,EAAMtB,EAAOC,EAAUC,EAM7B,OACE,eAACR,EAAD,WACE,cAACoB,EAAD,CAASC,MAAM,wBAAf,SACE,cAAC,EAAD,CACET,QAAS,CAAC,OAAQ,UAAW,OAC7BC,YA3BoB,SAAAgB,GAC1B,OAAQA,GACN,IAAK,OACHJ,GAAQ,SAAAK,GAAK,OAAIA,EAAQ,KACzB,MACF,IAAK,UACHJ,GAAW,SAAAI,GAAK,OAAIA,EAAQ,KAC5B,MACF,IAAK,MACHH,GAAO,SAAAG,GAAK,OAAIA,EAAQ,KACxB,MACF,QACE,aAkBF,oBAAIT,MAAM,aAAV,eACA,cAACD,EAAD,CAASC,MAAM,aAAf,SACGO,EAAM,EACL,cAAC,EAAD,CACEtB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,EACPlB,mBAnBWqB,KAAKC,MAAO1B,EAAOsB,EAAO,OAsBvC,cAACN,EAAD,CAAcD,MAAM,4BChD9BY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,UAAY,+B,kBCA9BD,EAAOC,QAAU,CAAC,IAAM,gC","file":"static/js/main.61f162d1.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\nimport с from \"./Container.module.css\";\r\n\r\nexport default function Container({ children }) {\r\n  return <div className={с.container}>{children}</div>;\r\n}\r\nContainer.propTypes = {\r\n  children: PropTypes.array.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul>\r\n      <li>Good: {good}</li>\r\n      <li>Neutral: {neutral}</li>\r\n      <li>Bad: {bad}</li>\r\n      <li>Total: {total}</li>\r\n      <li>Positive feedback: {positivePercentage}%</li>\r\n    </ul>\r\n  );\r\n};\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\nexport default Statistics;\r\n","import style from './FeedbackOptions.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, handleClick }) => {\r\n  return (\r\n    <>\r\n      {options.map(option => (\r\n        <button\r\n          key={option}\r\n          className={style.btn}\r\n          type=\"button\"\r\n          onClick={() => handleClick(option)}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\nFeedbackOptions.propTypes = {\r\n  handleClick: PropTypes.func,\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","import PropTypes from \"prop-types\";\r\nexport default function Notification({ title }) {\r\n  return <section>{title && <h3>{title}</h3>}</section>;\r\n}\r\nNotification.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\n\r\nimport Container from './Components/Container/Container';\r\nimport Statistics from './Components/Statistics/Statistics';\r\nimport FeedbackOptions from './Components/Feedback/FeedbackOptions';\r\nimport Section from './Components/Section/Section';\r\nimport Notification from './Components/Notification/Notification';\r\n\r\nfunction App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n\r\n  const onLeaveGoodFeedback = index => {\r\n    switch (index) {\r\n      case 'good':\r\n        setGood(state => state + 1);\r\n        break;\r\n      case 'neutral':\r\n        setNeutral(state => state + 1);\r\n        break;\r\n      case 'bad':\r\n        setBad(state => state + 1);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const sum = good + neutral + bad;\r\n\r\n  const countPositiveFeedbackPercentage = () => {\r\n    const percentage = Math.round((good / sum) * 100);\r\n    return percentage;\r\n  };\r\n  return (\r\n    <Container>\r\n      <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions\r\n          options={['good', 'neutral', 'bad']}\r\n          handleClick={onLeaveGoodFeedback}\r\n        />\r\n      </Section>\r\n      <h2 title=\"Statistics\"> </h2>\r\n      <Section title=\"Statistics\">\r\n        {sum > 0 ? (\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={sum}\r\n            positivePercentage={countPositiveFeedbackPercentage()}\r\n          />\r\n        ) : (\r\n          <Notification title=\"No feedback given\"></Notification>\r\n        )}\r\n      </Section>\r\n    </Container>\r\n  );\r\n}\r\n// const [good, setGood] = useState(0);\r\n// const [neutral, setNeutral] = useState(0);\r\n// const [bad, setBad] = useState(0);\r\n// const handleClick = event => {\r\n//   const { id } = event.target;\r\n//   console.log('Кликнули на кнопку');\r\n//   if (id === 'good') {\r\n//     return setGood(prevGood => prevGood + 1);\r\n//   }\r\n//   if (id === 'neutral') {\r\n//     return setNeutral(prevNeutral => prevNeutral + 1);\r\n//   }\r\n//   if (id === 'bad') {\r\n//     return setBad(prevBad => prevBad + 1);\r\n//   }\r\n// };\r\n// const countTotalFeedback = () => {\r\n//   return good + neutral + bad;\r\n// };\r\n// const countPositiveFeedbackPercentage = () => {\r\n//   return Math.round((good / countTotalFeedback()) * 100);\r\n// };\r\n// return (\r\n//   <Container>\r\n//     <Section title=\"Please leave feedback\">\r\n//       <FeedbackOptions\r\n//         options={{ good, neutral, bad }}\r\n//         handleClick={handleClick}\r\n//       />\r\n//     </Section>\r\n//     <h2 title=\"Statistics\"> </h2>\r\n//     <Section title=\"Statistics\">\r\n//       {countTotalFeedback() ? (\r\n//         <Statistics\r\n//           good={good}\r\n//           neutral={neutral}\r\n//           bad={bad}\r\n//           total={countTotalFeedback}\r\n//           positivePercentage={countPositiveFeedbackPercentage()}\r\n//         />\r\n//       ) : (\r\n//         <Notification title=\"No feedback given\"></Notification>\r\n//       )}\r\n//     </Section>\r\n//   </Container>\r\n// );\r\n// }\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n// import reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1O7r0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__11hle\"};"],"sourceRoot":""}